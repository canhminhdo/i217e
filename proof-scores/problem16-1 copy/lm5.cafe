in ../../pgm.cafe

-- ----------------------------------------------------------------------------
-- LEMMA5: \forall I J K \in NAT: ((I < J) and (J < K)) implies (I < K) .
-- [require] 
-- ----------------------------------------------------------------------------

select PNAT
--> PROOF: LEMMA5
--> base case
--> bcase 1
open PNAT .
    ops i j k : -> PNat .
    -- base case for i
        -- base case for j
    red ((0 < 0) and (0 < k)) implies (0 < k) .
close

--> bcase 2.1
open PNAT .
    ops i j k : -> PNat .
    
    -- base case for i
        -- induction case for j
            -- base case for k
    red ((0 < s(j)) and (s(j) < 0)) implies (0 < 0) .
close

--> bcase 2.2
open PNAT .
    ops i j k : -> PNat .
    
    -- base case for i
        -- induction case for j
            -- induction case for k
    red ((0 < s(j)) and (s(j) < s(k))) implies (0 < s(k)) .
close

--> induction case
--> case 1
open PNAT .
    ops i j k : -> PNat .
    
    -- induction case for i
        -- base case for j
    red ((s(i) < 0) and (0 < k)) implies (s(i) < k) .
close

--> case 2.1
open PNAT .
    ops i j k : -> PNat .
    
    -- induction case for i
        -- induction case for j
            -- base case for k
    red ((s(i) < s(j)) and (s(j) < 0)) implies (s(i) < 0) .
close

--> case 2.2.1.1.1
open PNAT .
    ops i j k : -> PNat .
    
    -- case splitting
    eq (i < j) = true .
    eq (j < k) = true .
    eq (i < k) = true .
    -- induction case for i
        -- induction case for j
            -- induction case for k
    red ((s(i) < s(j)) and (s(j) < s(k))) implies (s(i) < s(k)) .
close

--> case 2.2.1.1.2
open PNAT .
    ops i j k : -> PNat .
    
    -- case splitting
    eq (i < j) = true .
    eq (j < k) = true .
    eq (i < k) = false .
    -- induction case for i
        -- induction case for j
            -- induction case for k: using IH as antecedent
    red 
        (((i < j) and (j < k)) implies (i < k)) implies
        (((s(i) < s(j)) and (s(j) < s(k))) implies (s(i) < s(k))) .
close

--> case 2.2.1.2
open PNAT .
    ops i j k : -> PNat .
    
    -- case splitting
    eq (i < j) = true .
    eq (j < k) = false .
    -- induction case for i
        -- induction case for j
            -- induction case for k
    red ((s(i) < s(j)) and (s(j) < s(k))) implies (s(i) < s(k)) .
close

--> case 2.2.2
open PNAT .
    ops i j k : -> PNat .
    
    -- case splitting
    eq (i < j) = false .
    -- induction case for i
        -- induction case for j
            -- induction case for k
    red ((s(i) < s(j)) and (s(j) < s(k))) implies (s(i) < s(k)) .
close