in ../../pgm.cafe

-- ----------------------------------------------------------------------------
-- LEMMA3: \forall I J \in NAT: (not (I = J)) implies ((I < J) or (J < I)) .
-- [require] 
-- ----------------------------------------------------------------------------

select PNAT
--> PROOF: LEMMA3
--> base case
--> bcase 1
open PNAT .
    ops i j : -> PNat .

    -- base case for i
        -- base case for j
    red (not (0 = 0)) implies((0 < 0) or (0 < 0)) .
close

--> bcase 2
open PNAT .
    ops i j : -> PNat .
    
    -- base case for i
        -- induction case for j
    red (not (0 = s(j))) implies((0 < s(j)) or (s(j) < 0)) .
close

--> induction case
--> case 1
open PNAT .
    ops i j : -> PNat .

    -- induction case for i
        -- base case for j
    red 
        (not (s(i) = 0)) implies((s(i) < 0) or (0 < s(i))) .
close

--> case 2.1
open PNAT .
    ops i j : -> PNat .

    -- case splitting
    eq i = j .
    -- induction case for i
        -- induction case for j
    red 
        (not (s(i) = s(j))) implies((s(i) < s(j)) or (s(j) < s(i))) .
close

--> case 2.2.1
open PNAT .
    ops i j : -> PNat .

    -- case splitting
    eq (i = j) = false .
    eq (i < j) = true .
    -- induction case for i
        -- induction case for j
    red 
        (not (s(i) = s(j))) implies((s(i) < s(j)) or (s(j) < s(i))) .
close

--> case 2.2.2.1
open PNAT .
    ops i j : -> PNat .

    -- case splitting
    eq (i = j) = false .
    eq (i < j) = false .
    eq (j < i) = true .
    -- induction case for i
        -- induction case for j
    red 
        (not (s(i) = s(j))) implies((s(i) < s(j)) or (s(j) < s(i))) .
close

--> case 2.2.2.2
open PNAT .
    ops i j : -> PNat .

    -- case splitting
    eq (i = j) = false .
    eq (i < j) = false .
    eq (j < i) = false .
    -- induction case for i
        -- induction case for j: using IH as antecedent
    red 
        ((not (i = j)) implies ((i < j) or (j < i))) implies
        ((not (s(i) = s(j))) implies((s(i) < s(j)) or (s(j) < s(i)))) .
close