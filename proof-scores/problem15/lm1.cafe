in ../../pgm.cafe

-- ----------------------------------------------------------------------------
-- LEMMA1: \forall I J \in NAT: max(I, J) = max(J, I) .
-- [require]
-- ----------------------------------------------------------------------------

select PNAT
--> PROOF: LEMMA1
--> base case
--> bcase 1
open PNAT .
    ops i j : -> PNat .
    
    -- base case for i
        -- base case for j
    red max(0, 0) = max(0, 0) .
close

--> bcase 2
open PNAT .
    ops i j : -> PNat .
    
    -- base case for i
        -- induction case for j
    red max(0, s(j)) = max(s(j), 0) .
close

--> induction case
--> case 1
open PNAT .
    ops i j : -> PNat .
    
    -- induction case for i
        -- base case for j
    red max(s(i), 0) = max(0, s(i)) .
close

--> case 2.1
open PNAT .
    ops i j : -> PNat .
    
    -- case splitting
    eq i = j .
    -- induction case for i
        -- induction case for j
    red max(s(i), s(j)) = max(s(j), s(i)) .
close

--> case 2.2.1.1
open PNAT .
    ops i j : -> PNat .
    
    -- case splitting
    eq (i = j) = false .
    eq (i > j) = true .
    eq (j > i) = true .
    -- induction case for i
        -- induction case for j: using PROBLEM14 - LEMMA1 as antecedent
    red 
        ((i > j) implies (not (j > i))) implies
        (max(s(i), s(j)) = max(s(j), s(i))) .
close

--> case 2.2.1.2
open PNAT .
    ops i j : -> PNat .
    
    -- case splitting
    eq (i = j) = false .
    eq (i > j) = true .
    eq (j > i) = false .
    -- induction case for i
        -- induction case for j
    red max(s(i), s(j)) = max(s(j), s(i)) .
close

--> case 2.2.2.1
open PNAT .
    ops i j : -> PNat .
    
    -- case splitting
    eq (i = j) = false .
    eq (i > j) = false .
    eq (j > i) = true .
    -- induction case for i
        -- induction case for j
    red max(s(i), s(j)) = max(s(j), s(i)) .
close

--> case 2.2.2.2
open PNAT .
    ops i j : -> PNat .
    
    -- case splitting
    eq (i = j) = false .
    eq (i > j) = false .
    eq (j > i) = false .
    -- induction case for i
        -- induction case for j: using PROBLEM14 - LEMMA3 as antecedent
    red 
        (((not (i > j)) and (not (j > i))) implies (i = j)) implies
        (max(s(i), s(j)) = max(s(j), s(i))) .
close