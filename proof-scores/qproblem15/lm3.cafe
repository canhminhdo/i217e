in ../../pgm.cafe

-- ----------------------------------------------------------------------------
-- LEMMA3: \forall I J \in NAT: (not (I = J)) implies ((I < J) or (J < I)) .
-- [require] 
-- ----------------------------------------------------------------------------

select PNAT
--> PROOF: LEMMA3
--> base case
--> bcase 1
open PNAT .
    op j : -> PNat .
    
    -- case spliting
    eq j = 0 .
    red (not (0 = j)) implies((0 < j) or (j < 0)) .
close

--> bcase 2
open PNAT .
    ops j y : -> PNat .
    
    -- case spliting
    eq j = s(y) .
    red (not (0 = j)) implies((0 < j) or (j < 0)) .
close

--> induction case
--> case 1
open PNAT .
    ops j x : -> PNat .

    -- case spliting
    eq j = 0 .
    red 
        (not (s(x) = j)) implies((s(x) < j) or (j < s(x))) .
close

--> case 2.1
open PNAT .
    ops j x y : -> PNat .

    -- case spliting
    eq j = s(y) .
    eq x = y .
    red 
        (not (s(x) = j)) implies((s(x) < j) or (j < s(x))) .
close

--> case 2.2.1
open PNAT .
    ops j x y : -> PNat .

    -- case spliting
    eq j = s(y) .
    eq (x = y) = false .
    eq (x < y) = true .
    red 
        (not (s(x) = j)) implies((s(x) < j) or (j < s(x))) .
close

--> case 2.2.2.1
open PNAT .
    ops j x y : -> PNat .

    -- case spliting
    eq j = s(y) .
    eq (x = y) = false .
    eq (x < y) = false .
    eq (y < x) = true .
    red 
        (not (s(x) = j)) implies((s(x) < j) or (j < s(x))) .
close

--> case 2.2.2.2
open PNAT .
    ops j x y : -> PNat .

    -- case spliting
    eq j = s(y) .
    eq (x = y) = false .
    eq (x < y) = false .
    eq (y < x) = false .
    red 
        ((not (x = y)) implies ((x < y) or (y < x))) implies
        (not (s(x) = j)) implies((s(x) < j) or (j < s(x))) .
close
