in ../../pgm.cafe

-- ----------------------------------------------------------------------------
-- LEMMA1: \forall I \in PNat, L1 L2 \in NatList: count(L1 @ L2, I) = count(L1, I) + count(L2, I) .
-- [require]
-- ----------------------------------------------------------------------------

select NATLIST
--> PROOF: LEMMA1
--> base case
open NATLIST .
    op y : -> PNat .
    ops l1 l2 : -> NatList .
    -- base case
    red count(nil @ l2, y) = (count(nil, y) + count(l2, y)) .
close

--> induction case
--> case 1
open NATLIST .
    ops x y : -> PNat .
    ops l1 l2 : -> NatList .

    -- induction hypothesis
    eq [IH] : count(l1 @ l2, y) = count(l1, y) + count(l2, y) .
    -- case splitting
    eq x = y .
    -- induction case
    red count((x | l1) @ l2, y) = count((x | l1), y) + count(l2, y) .
close

--> case 2
open NATLIST .
    ops x y : -> PNat .
    ops l1 l2 : -> NatList .

    -- induction hypothesis
    eq [IH] : count(l1 @ l2, y) = count(l1, y) + count(l2, y) .
    -- case splitting
    eq (x = y) = false .
    -- induction case
    red count((x | l1) @ l2, y) = count((x | l1), y) + count(l2, y) .
close