in ../../pgm.cafe

-- ----------------------------------------------------------------------------
-- LEMMA1: \forall I \in PNat, \forall L1 L2 \in NatList: count(L1 @ L2, I) = count(L1, I) + count(L2, I) .
-- [require]
-- ----------------------------------------------------------------------------

select NATLIST
--> PROOF: LEMMA1
--> base case
open NATLIST .
    op x : -> PNat .
    ops l1 l2 : -> NatList .
    -- base case
    red count(nil @ l2, x) = (count(nil, x) + count(l2, x)) .
close

--> induction case
--> case 1
open NATLIST .
    ops x y : -> PNat .
    ops l1 l2 : -> NatList .

    -- induction hypothesis
    eq [IH] : count(l1 @ l2, x) = count(l1, x) + count(l2, x) .
    -- case splitting
    eq y = x .
    -- induction case
    red count((y | l1) @ l2, x) = count((y | l1), x) + count(l2, x) .
close

--> case 2
open NATLIST .
    ops x y : -> PNat .
    ops l1 l2 : -> NatList .

    -- induction hypothesis
    eq [IH] : count(l1 @ l2, x) = count(l1, x) + count(l2, x) .
    -- case splitting
    eq (y = x) = false .
    -- induction case
    red count((y | l1) @ l2, x) = count((y | l1), x) + count(l2, x) .
close