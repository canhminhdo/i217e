in ../../pgm.cafe

-- ----------------------------------------------------------------------------
-- LEMMA2: \forall I J K \in NAT: (not (I > J) and not (J > K)) implies not (I > K) .
-- [require] 
-- ----------------------------------------------------------------------------

select PNAT
--> PROOF: LEMMA2
--> base case
open PNAT .
    ops i j k : -> PNat .
    red ((not (0 > j)) and (not (j > k))) implies (not (0 > k)) .
close

--> induction case
--> case 1
open PNAT .
    ops i j k : -> PNat .

    -- induction case for i
        -- base case for j
    red ((not (s(i) > 0)) and (not (0 > k))) implies (not (s(i) > k)) .
close

--> case 2.1
open PNAT .
    ops i j k : -> PNat .

    -- induction case for i
        -- induction case for j
            -- base case for k
    red ((not (s(i) > s(j))) and (not (s(j) > 0))) implies (not (s(i) > 0)) .
close

--> case 2.2.1
open PNAT .
    ops i j k : -> PNat .

    -- case splitting
    eq (i > j) = true .
    -- induction case for i
        -- induction case for j
            -- induction case for k
    red ((not (s(i) > s(j))) and (not (s(j) > s(k)))) implies (not (s(i) > s(k))) .
close

--> case 2.2.2.1
open PNAT .
    ops i j k : -> PNat .

    -- case splitting
    eq (i > j) = false .
    eq (j > k) = true .
    -- induction case for i
        -- induction case for j
            -- induction case for k
    red ((not (s(i) > s(j))) and (not (s(j) > s(k)))) implies (not (s(i) > s(k))) .
close

--> case 2.2.2.2.1
open PNAT .
    ops i j k : -> PNat .

    -- case splitting
    eq (i > j) = false .
    eq (j > k) = false .
    eq (i > k) = true .
    -- induction case for i
        -- induction case for j
            -- induction case for k: using IH as antecedent
    red 
        (((not (i > j)) and (not (j > k))) implies (not (i > k))) implies
        ((not (s(i) > s(j))) and (not (s(j) > s(k)))) implies (not (s(i) > s(k))) .
close

--> case 2.2.2.2.2
open PNAT .
    ops i j k : -> PNat .

    -- case splitting
    eq (i > j) = false .
    eq (j > k) = false .
    eq (i > k) = false .
    -- induction case for i
        -- induction case for j
            -- induction case for k
    red ((not (s(i) > s(j))) and (not (s(j) > s(k)))) implies (not (s(i) > s(k))) .
close