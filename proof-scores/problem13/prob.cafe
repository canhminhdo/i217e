in ../../pgm.cafe

-- ----------------------------------------------------------------------------
-- PROBLEM13: \forall I \in PNat, \forall L \in NatList: count(L, I) = count(rev(L), I) .
-- [require] LEMMA1, PROBLEM1 - LEMMA5
-- ----------------------------------------------------------------------------

select NATLIST
--> PROOF: PROBLEM13
--> base case
open NATLIST .
    var I : PNat .
    -- base case
    red count(nil, I) = count(rev(nil), I) .
close

--> induction case
--> case 1
open NATLIST .
    ops x y : -> PNat .
    op l : -> NatList .
    
    var I : PNat .
    vars L1 L2 : NatList .

    -- induction hypothesis
    eq [IH] : count(l, x) = count(rev(l), x) .
    -- case splitting
    eq y = x .
    -- use LEMMA1
    eq count(L1 @ L2, I) = count(L1, I) + count(L2, I) .
    -- use PROBLEM1 - LEMMA5
    eq [comm+] : count(rev(l),x) + s(0) = s(0) + count(rev(l),x) .
    -- induction case
    red count((y | l), x) = count(rev(y | l), x) .
close

--> case 2
open NATLIST .
    ops x y : -> PNat .
    op l : -> NatList .
    
    var I : PNat .
    vars L1 L2 : NatList .

    -- induction hypothesis
    eq [IH] : count(l, x) = count(rev(l), x) .
    -- case splitting
    eq (y = x) = false .
    -- use LEMMA1
    eq count(L1 @ L2, I) = count(L1, I) + count(L2, I) .
    -- use PROBLEM1 - LEMMA5
    eq [comm+] : I + 0 = 0 + I .
    -- induction case
    red count((y | l), x) = count(rev(y | l), x) .
close