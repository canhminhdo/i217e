in ../../pgm.cafe

-- ----------------------------------------------------------------------------
-- PROBLEM10: \forall X \in PNat, \forall L \in NatList: drop(L, X) = rev(drop(rev(L), X)) .
-- [require] LEMMA1
-- ----------------------------------------------------------------------------

select NATLIST
--> PROOF: PROBLEM10
--> base case
open NATLIST .
    op x : -> PNat .

    red drop(nil, x) = rev(drop(rev(nil), x)) .
close

--> induction case with case splitting
--> case 1
open NATLIST .
    ops x y : -> PNat .
    ops l : -> NatList .

    var I : PNat .
    vars L1 L2 : NatList .
    
    -- induction hypothesis
    eq [IH] : drop(l, x) = rev(drop(rev(l), x)) .
    -- use LEMMA1
    eq [LEMMA1] : drop(L1 @ L2, I) = drop(L1, I) @ drop(L2, I) .
    -- use PROBLEM4 - LEMMA2
    eq [PROB4-LM2] : L1 @ nil = L1 .
    -- case splitting
    eq y = x .
    -- induction case
    red drop(y | l, x) = rev(drop(rev(y | l), x)) .
close

--> case 2
open NATLIST .
    ops x y : -> PNat .
    ops l : -> NatList .

    var I : PNat .
    vars L1 L2 : NatList .
    
    -- induction hypothesis
    eq [IH] : drop(l, x) = rev(drop(rev(l), x)) .
    -- use LEMMA1
    eq [LEMMA1] : drop(L1 @ L2, I) = drop(L1, I) @ drop(L2, I) .
    -- use PROBLEM4 - LEMMA1
    eq [PROB4-LM1] : rev(L1 @ L2) = rev(L2) @ rev(L1) .
    -- case splitting
    eq (y = x) = false .
    -- induction case
    red drop(y | l, x) = rev(drop(rev(y | l), x)) .
close
