in ../../pgm.cafe

-- ----------------------------------------------------------------------------
-- LEMMA3: \forall I J \in NAT: (not (I > J)) and (not (J > I))) implies (I = J) .
-- [require] LEMMA2
-- ----------------------------------------------------------------------------

select PNAT
--> PROOF: LEMMA3
--> base case
--> bcase 1
open PNAT .
    op j : -> PNat .
    
    -- case splitting
    eq (j > 0) = true .
    -- base case
    red ((not (0 > j)) and (not (j > 0))) implies (0 = j) .
close

--> bcase 2.1
open PNAT .
    op j : -> PNat .
    
    -- case splitting
    eq (j > 0) = false .
    eq (j = 0) = true .
    -- base case
    red ((not (0 > j)) and (not (j > 0))) implies (0 = j) .
close

--> bcase 2.2
open PNAT .
    op j : -> PNat .
    
    -- case splitting
    eq (j > 0) = false .
    eq (j = 0) = false .
    -- base case: using LEMMA2 as antecedent
    red 
        ((not (j > 0)) implies (j = 0)) implies
        (((not (0 > j)) and (not (j > 0))) implies (0 = j)) .
close

--> induction case
--> case 1
open PNAT .
    ops i j : -> PNat .    
    
    -- induction case for i
        -- base case for j
    red ((not (s(i) > 0)) and (not (0 > s(i)))) implies (s(i) = 0) .
close

--> case 2.1
open PNAT .
    ops i j : -> PNat .    
    
    -- case splitting
    eq (i = j) = true .
    -- induction case for i
        -- induction case for j
    red ((not (s(i) > s(j))) and (not (s(j) > s(i)))) implies (s(i) = s(j)) .
close

--> case 2.2.1
open PNAT .
    ops i j : -> PNat .    
    
    -- case splitting
    eq (i = j) = false .
    eq (i > j) = true .
    -- induction case for i
        -- induction case for j
    red ((not (s(i) > s(j))) and (not (s(j) > s(i)))) implies (s(i) = s(j)) .
close

--> case 2.2.2.1
open PNAT .
    ops i j : -> PNat .    
    
    -- case splitting
    eq (i = j) = false .
    eq (i > j) = false .
    eq (j > i) = true .
    -- induction case for i
        -- induction case for j
    red ((not (s(i) > s(j))) and (not (s(j) > s(i)))) implies (s(i) = s(j)) .
close

--> case 2.2.2.2
open PNAT .
    ops i j : -> PNat .    
    
    -- case splitting
    eq (i = j) = false .
    eq (i > j) = false .
    eq (j > i) = false .
    -- induction case for i
        -- induction case for j : using IH as antecedent
    red 
        (((not (i > j)) and (not (j > i))) implies (i = j)) implies
        (((not (s(i) > s(j))) and (not (s(j) > s(i)))) implies (s(i) = s(j))) .
close