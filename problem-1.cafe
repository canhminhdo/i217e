in pgm.cafe

-- ----------------------------------------------------------------------------
-- PROBLEM1: \forall L \in NatList: fold*(rev(L)) = fold*(L) .
-- ----------------------------------------------------------------------------

select NATLIST
--> PROOF: PROBLEM1
--> base case
open NATLIST .
    red fold*(rev(nil)) = fold*(nil) .
close

--> induction case
open NATLIST .
    vars L1 L2 : NatList .
    op x : -> PNat .
    op l : -> NatList .

    -- induction hypothesis:
    eq fold*(rev(l)) = fold*(l) .
    -- use LEMMA1
    eq fold*(L1 @ L2) = fold*(L1) * fold*(L2) .
    -- use LEMMA8 [comm*]
    eq x * s(0) = s(0) * x .
    eq fold*(l) * x = x * fold*(l) .
    -- induction case:
    red fold*(rev(x | l)) = fold*(x | l) .
close

-- ----------------------------------------------------------------------------
-- LEMMA1: \forall L \in NatList: fold*(L1 @ L2) = fold*(L1) * fold*(L2) .
-- [require] LEMMA2
-- ----------------------------------------------------------------------------

select NATLIST
--> PROOF: LEMMA1
--> base case
open NATLIST .
    op l2 : -> NatList .

    red fold*(nil @ l2) = fold*(nil) * fold*(l2) .
close

--> induction case
open NATLIST .
    vars I J K : PNat .
    op x : -> PNat .
    ops l1 l2 : -> NatList .

    -- induction hypothesis:
    eq fold*(l1 @ l2) = fold*(l1) * fold*(l2) .
    -- use LEMMA2 [assoc*]
    eq (I * J) * K = I * (J * K) .
    -- induction case:
    red fold*((x | l1) @ l2) = fold*(x | l1) * fold*(l2) .
close

-- ----------------------------------------------------------------------------
-- LEMMA2 [assoc*] : \forall I J K \in PNat: (I * J) * K = I * (J * K) .
-- [require] LEMMA3
-- ----------------------------------------------------------------------------

select PNAT
--> PROOF: LEMMA2
--> base case
open PNAT .
    ops j k : -> PNat .

    red (0 * j) * k = 0 * (j * k) .
close

--> induction case
open PNAT .
    vars N M K : PNat .
    ops i j k : -> PNat .

    -- induction hypothesis:
    eq (i * j) * k = i * (j * k) .
    -- use LEMMA3
    eq (N + M) * K = (N * K) + (M * K) .
    -- induction case:
    red (s(i) * j) * k = s(i) * (j * k) .
close

-- ----------------------------------------------------------------------------
-- LEMMA3: \forall I J K \in PNat: (I + J) * K = (I * K) + (J * K) .
-- [require] LEMMA4, LEMMA5
-- ----------------------------------------------------------------------------

select PNAT
--> PROOF: LEMMA3
--> base case
open PNAT .
    ops i j k : -> PNat .

    red (0 + j) * k = (0 * k) + (j * k) .
close

--> induction case
open PNAT .
    vars N M K : PNat .
    ops i j k : -> PNat .

    -- induction hypothesis
    eq (i + j) * k = (i * k) + (j * k) .
    -- use LEMMA4 [assoc+]
    eq (N + M) + K = N + (M + K) .
    -- use LEMMA5 [comm+]
    eq (j * k) + k = k + (j * k) .
    -- induction step
    red (s(i) + j) * k = (s(i) * k) + (j * k) .
close

-- ----------------------------------------------------------------------------
-- LEMMA4 [assoc+]: \forall I J K \in PNat : (I + J) + K = I + (J + K) .
-- associative property for _+_
-- ----------------------------------------------------------------------------

select PNAT
--> PROOF: LEMMA4
--> base case
open PNAT .
    ops j k : -> PNat .

    red (0 + j) + k = 0 + (j + k) .
close

--> induction case
open PNAT .
    ops i j k : -> PNat .

    -- induction hypothesis
    eq (i + j) + k = i + (j + k) .
    -- induction step
    red (s(i) + j) + k = s(i) + (j + k) .
close

-- ----------------------------------------------------------------------------
-- LEMMA5 [comm+] : \forall I J \in PNat: I + J = J + I .
-- commutative property of _+_
-- [require] LEMMA6, LEMMA7
-- ----------------------------------------------------------------------------

select PNAT
--> PROOF: LEMMA5
--> base case
open PNAT .
    ops j : -> PNat .
    
    -- use LEMMA6
    eq j + 0 = j .
    red 0 + j = j + 0 .
close

--> induction case
open PNAT .
    vars N M : PNat .
    ops i j : -> PNat .

    -- induction hypothesis
    eq i + j = j + i .
    -- use LEMMA7
    eq j + s(i) = s(j + i) . 
    -- induction step
    red s(i) + j = j + s(i) .
close

-- ----------------------------------------------------------------------------
-- LEMMA6 : \forall I \in PNat: I + 0 = I .
-- additive property of 0
-- ----------------------------------------------------------------------------

select PNAT
--> PROOF: LEMMA6
--> base case
open PNAT .
    red 0 + 0 = 0 + 0 .
close
    
--> induction case
open PNAT .
    ops i : -> PNat .

    -- induction hypothesis
    eq i + 0 = i .
    -- induction step
    red s(i) + 0 = s(i) .
close

-- ----------------------------------------------------------------------------
-- LEMMA7 : \forall I J \in PNat: I + S(J) = S(I + J) .
-- [require] LEMMA6
-- ----------------------------------------------------------------------------

select PNAT
--> PROOF: LEMMA7
--> base case
open PNAT .
    ops j : -> PNat .
    -- use LEMMA6
    eq j + 0 = j .
    red 0 + s(j) = s(j + 0) .
close
    
--> induction case
open PNAT .
    ops i j : -> PNat .

    -- induction hypothesis
    eq i + s(j) = s(i + j) .
    -- induction step
    red s(i) + s(j) = s(s(i) + j) .
close

-- ----------------------------------------------------------------------------
-- LEMMA8 [comm*] : \forall I J \in Nat: I * J = J * I .
-- [require] LEMMA5, LEMMA9, LEMMA10
-- ----------------------------------------------------------------------------

select PNAT
--> PROOF: LEMMA8
--> base case
open PNAT .
    ops j : -> PNat .

    -- use LEMMA9
    eq j * 0 = 0 .
    red 0 * j = j * 0 .
close

--> induction case
open PNAT .
    vars I J : PNat .
    ops i j : -> PNat .

    -- induction hypothesis
    eq i * j = j * i .
    -- use LEMMA10
    eq I * s(J) = I + (I * J) .
    -- use LEMMA5 [comm+]
    eq (j * i) + j = j + (j * i) .
    -- induction case
    red s(i) * j = j * s(i) .
close

-- ----------------------------------------------------------------------------
-- LEMMA9 : \forall I \in PNat: I * 0 = 0 .
-- product property of 0
-- ----------------------------------------------------------------------------

select PNAT
--> PROOF: LEMMA9
--> base case
open PNAT .
    red 0 * 0 = 0 * 0 .
close
    
--> induction case
open PNAT .
    ops i : -> PNat .

    -- induction hypothesis
    eq i * 0 = 0 .
    -- induction step
    red s(i) * 0 = 0 .
close

-- ----------------------------------------------------------------------------
-- LEMMA10 : \forall I J \in PNat: I * s(J) = I + (I * J) .
-- [require] LEMMA4, LEMMA7
-- ----------------------------------------------------------------------------

select PNAT
--> PROOF: LEMMA10
--> base case
open PNAT .
    ops j : -> PNat .

    red 0 * s(j) = 0 * (0 * j) .
close
    
--> induction case
open PNAT .
    vars I J K : PNat .
    ops i j : -> PNat .

    -- induction hypothesis
    eq i * s(j) = i + (i * j) .
    -- use LEMMA7: I + S(J) = S(I + J) .
    eq I + s(J) = s(I + J) .
    -- use LEMMA4 [assoc+]
    eq (I + J) + K = I + (J + K) .
    -- induction step
    red s(i) * s(j) = s(i) + (s(i) * j) .
close